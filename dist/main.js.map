{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/algorithms/polytreenode.js","webpack:///./src/board.js","webpack:///./src/index.js","webpack:///./src/tile.js"],"names":["PolyTreeNode","value","position","grid","tileObj","document","getElementById","parent","children","visitedTiles","visited","Set","add","join","animateBFS","bind","func","length","setTimeout","currentPos","shift","tile","classList","target","queue","currentNode","push","console","log","stack","i","unshift","increments","neighbors","forEach","inc","newPos","has","neighborTile","node","addParent","parentNode","removeChild","Board","row","j","newTile","Tile","pos","addEventListener","board","fillGrid","rootNode","targetNode","setAlgo","event","algorithm","id","dijkstrasButton","astarButton","bfsButton","dfsButton","runAlgorithm","buildTree","bfs","dfs","visButton","createElement","appendChild"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","export default class PolyTreeNode {\n\n    constructor(value, position, grid) {\n        this.value = value;\n        this.position = position;\n        this.grid = grid;\n\n\n        // debugger\n        this.tileObj = document.getElementById(`${position[0]}-${position[1]}`);\n\n        this.parent = null;\n        this.children = [];\n\n        this.visitedTiles = [];\n\n        this.visited = new Set();\n        this.visited.add(this.position.join(\"-\"));\n\n        // this.flipTile = this.flipTile.bind(this);\n        this.animateBFS = this.animateBFS.bind(this);\n    }\n\n    // flipTile() {\n    //     this.grid[tilePos[0]][tilePos[1]].node.classList.add(\"visited\");\n    // }\n\n    animateBFS(visitedTiles, grid) {\n\n        let func = this.animateBFS;\n\n        if (visitedTiles.length > 0) {\n            setTimeout(function() {\n                // debugger\n                let currentPos = visitedTiles.shift()\n                grid[currentPos[0]][currentPos[1]].tile.classList.add(\"visited\");\n                func(visitedTiles, grid);\n            }, 100)\n        }\n\n        // const flipTile = tilePos => {\n        //     this.grid[tilePos[0]][tilePos[1]].tile.classList.add(\"visited\")\n        // }\n\n        // for (let i = 0; i < this.visitedTiles.length - 1; i++) {\n        //     setTimeout(flipTile(this.visitedTiles[i]), 1000)\n        // }\n\n        // this.visitedTiles.forEach(tile => {\n        //     setTimeout(this.flipTile(tile), 1000)\n        // })\n\n        // if (this.visitedTiles.length > 0) {\n        //     let currentTile = this.visitedTiles.shift();\n\n        //     setTimeout(currentTile.flipTile, 100);\n            \n        //     if (this.visitedTiles.length > 0) {\n        //         this.animateBFS()\n        //     }\n        // }\n\n    }\n\n    bfs(target) {\n        let queue = [this];\n\n        while (queue.length > 0) {\n\n            let currentNode = queue.shift();\n\n            if (currentNode.value !== \"root\" && currentNode.value !== \"target\") {\n                this.visitedTiles.push(currentNode.position)\n            }\n\n            if (currentNode.value === target) {\n                this.visitedTiles.push(currentNode.position)\n                currentNode.tileObj.classList.add(\"target-found\");\n                console.log(\"BFS Completed\")\n                this.animateBFS(this.visitedTiles, this.grid);\n                return currentNode;\n            }\n            \n            queue.push(...currentNode.children);\n        }\n        \n    }\n\n    // bfs(target) {\n    //     let queue = [this];\n\n    //     while (queue.length > 0) {\n    //         // debugger\n    //         let currentNode = queue.shift();\n\n    //         if (currentNode.value !== \"root\" && currentNode.value !== \"target\") {\n    //             currentNode.tileObj.classList.add(\"visited\");\n    //         }\n\n    //         if (currentNode.value === target) {\n    //             // debugger\n    //             currentNode.tileObj.classList.add(\"target-found\");\n    //             console.log(currentNode);\n    //             this.animateBFS();\n    //             return currentNode;\n    //         }\n            \n    //         queue.push(...currentNode.children);\n    //     }\n        \n    //     // Logic for handling unsolvable grid goes here\n    // }\n\n    // bfs(target) {\n    //     let queue = [this];\n\n    //     while (queue.length > 0) {\n    //         let startTime = Date.now();\n\n    //         const wait = () => {\n    //             debugger\n    //             if (Date.now() > startTime + 100) {\n    //                 let currentNode = queue.shift();\n\n    //                 if (currentNode.value !== \"root\" && currentNode.value !== \"target\") {\n    //                     currentNode.tileObj.classList.add(\"visited\");\n    //                 }\n        \n    //                 if (currentNode.value === target) {\n    //                     currentNode.tileObj.classList.add(\"target-found\");\n    //                     console.log(currentNode);\n    //                     return currentNode;\n    //                 }\n                    \n    //                 queue.push(...currentNode.children);\n    //             } else {\n    //                 setTimeout(wait, 50)\n    //             }\n    //         }\n\n    //         wait();    \n    //     }\n        \n    // }\n\n        \n\n    // dfs(target) {\n\n    //     if (this.value === target) {\n    //         this.tileObj.classList.add(\"target-found\");\n    //         console.log(this);\n    //         return this.value;\n    //     }\n\n    //     if (this.value !== \"root\" && this.value !== \"target\") {\n    //         this.tileObj.classList.add(\"visited\");\n    //         // debugger\n    //     }\n\n    //     for (let i = 0; i < this.children.length; i++) {\n    //         let childDfs = this.children[i].dfs(target)\n    //         if (childDfs === target) {\n    //             return childDfs;\n    //         }\n    //     }\n\n    // }\n\n    dfs(target) {\n        let stack = [this];\n\n        while (stack.length > 0) {\n            for (let i = 0; i < stack.length; i++) {\n\n                let currentNode = stack.shift();\n\n                if (currentNode.value === target) {\n                    currentNode.tileObj.classList.add(\"target-found\");\n                    console.log(currentNode);\n                    return currentNode;\n                } else if (currentNode.value !== \"root\") {\n                    // debugger\n                    currentNode.tileObj.classList.add(\"visited\");\n                }\n\n                stack.unshift(...currentNode.children)\n            }\n\n        }\n\n\n    }\n\n    buildTree() {\n        const increments = [\n            [-1, 0], // Up\n            [0, 1], // Right\n            [1, 0], // Down\n            [0, -1] // Left\n\n            // [1, 0], // Down\n            // [0, -1], // Left\n            // [-1, 0], // Up\n            // [0, 1] // Right\n\n            // [0, 1]\n            // [1, 0],\n            // [-1, 0],\n            // [0, -1]\n        ];\n\n        // buildTree function will use the node on which it is called as the root node of the tree\n        let neighbors = [this]; // This is a queue\n\n        while (neighbors.length > 0) {\n            let currentNode = neighbors.shift();\n            \n            increments.forEach(inc => {\n                let newPos = [currentNode.position[0] + inc[0], currentNode.position[1] + inc[1]];\n                \n\n                // If the position is valid:\n                if (newPos[0] >= 0 && newPos[0] < 25 && newPos[1] >= 0 && newPos[1] < 48) {\n\n                    if (this.visited.has(newPos.join(\"-\"))) {\n                        return\n                    }\n    \n                    this.visited.add(newPos.join(\"-\"));\n\n                    // console.log(newPos.join(\"-\"))\n\n                    let neighborTile = this.grid[newPos[0]][newPos[1]];\n                    neighbors.push(neighborTile.node);\n                    neighborTile.node.addParent(currentNode);\n\n                    // If the neighbor exists, has no parent, and is not already a child of the current node:\n                    // if (neighborTile.node.parent === null && !currentNode.children.includes(neighborTile.node)) {\n                    //     neighbors.push(neighborTile.node);\n                    //     neighborTile.node.addParent(currentNode);\n                    // }\n                }\n            })\n\n        }\n\n    }\n\n    addParent(parentNode) {\n        if (this.parent !== null) { // Check to see if current node already has a parent\n            this.parent.removeChild(this) // Remove itself from old parent's children\n        }\n\n        if (parentNode !== null) {\n            this.parent = parentNode;\n            parentNode.children.push(this);\n        }\n    }\n\n    // addChild(childNode) {\n    //     childNode.addParent(this);\n    // }\n\n    // removeChild(childNode) {\n    //     let index = this.children.indexOf(childNode);\n    //     this.children.splice(index, 1);\n    //     childNode.parent = null;\n    // }\n\n}\n\n\n\n\n// let cb = () => {console.log('yey!')};\n// let cbArr = [cb, cb, cb, cb];\n\n// const timedExecution = () => {\n//   setTimeout(() => {\n//     if (cbArr.length > 0) {\n//       let func = cbArr.pop();\n//       func();\n//       timedExecution();\n//     }\n//   }, 1000)\n// };\n\n\n\n\n\n\n\n    ","import Tile from \"./tile\";\n\nexport default class Board { \n\n    constructor() {\n        this.grid = [];\n    }\n\n    fillGrid() {       \n        for (let i = 0; i < 25; i++) { // Board is 25 x 48, 1200 total tiles\n            let row = [];\n\n            for (let j = 0; j < 48; j++) {\n                let newTile = new Tile([i, j], this);\n                row.push(newTile);\n            }\n\n            this.grid.push(row);\n        }\n    };\n\n    validPos(pos) {\n        \n    }\n\n    setRoot(pos) {\n    \n    }\n\n    setTarget(pos) {\n\n    }\n\n}","import Board from \"./board\";\nimport PolyTreeNode from \"./algorithms/polytreenode\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\n    // Create and fill board\n    let board = new Board();\n    board.fillGrid();\n    console.log(\"Board initialized and populated\")\n\n    // Set root node\n    board.grid[12][9].node = new PolyTreeNode(\"root\", [12, 9], board.grid);\n    let rootNode = board.grid[12][9];\n    rootNode.tile.classList.add(\"root-node\")\n    console.log(\"Root node set\");\n\n    // Set target node\n    board.grid[12][40].node = new PolyTreeNode(\"target\", [12, 40], board.grid);\n    let targetNode = board.grid[12][40];\n    targetNode.tile.classList.add(\"target-node\")\n    console.log(\"Target node set\");\n\n    // Add functionality to radio buttons\n    function setAlgo(event) {\n        algorithm = event.target.id;\n    }\n\n    let algorithm = \"bfs-btn\"; // Default algorithm\n       \n    const dijkstrasButton = document.getElementById(\"dijkstras-btn\");\n    const astarButton = document.getElementById(\"astar-btn\");\n    const bfsButton = document.getElementById(\"bfs-btn\");\n    const dfsButton = document.getElementById(\"dfs-btn\");\n    \n    dijkstrasButton.addEventListener(\"click\", setAlgo);\n    astarButton.addEventListener(\"click\", setAlgo);\n    bfsButton.addEventListener(\"click\", setAlgo);\n    dfsButton.addEventListener(\"click\", setAlgo);\n\n\n    // Add functionality to Visualize button\n    function runAlgorithm() {\n        switch (algorithm) {\n            case \"bfs-btn\":\n                rootNode.node.buildTree();\n                console.log(\"Node tree built\")\n                rootNode.node.bfs(\"target\");\n                console.log(\"BFS executed\");\n                break;\n            case \"dfs-btn\":\n                rootNode.node.buildTree();\n                console.log(\"Node tree built\")\n                rootNode.node.dfs(\"target\");\n                console.log(\"DFS executed\");\n            default:\n                break;\n        }\n    }\n\n    let visButton = document.getElementById(\"vis-button\");\n    visButton.addEventListener(\"click\", runAlgorithm);\n\n})","import PolyTreeNode from \"./algorithms/polytreenode\";\n\nexport default class Tile {\n    \n    constructor(position, board) {\n        this.position = position;\n        // this.board = board;\n\n        this.tile = document.createElement(\"div\");\n        this.tile.classList.add(\"tile\");\n        this.tile.id = `${position[0]}-${position[1]}`;\n\n        let grid = document.getElementById(\"grid\");\n        grid.appendChild(this.tile);\n\n        this.node = new PolyTreeNode(null, position, board.grid);\n    }\n\n    visit() {\n        this.tile.classList.add(\"visited\");\n    }\n    \n    markFound() {\n        this.tile.classList.add(\"target-found\")\n    }\n}"],"sourceRoot":""}